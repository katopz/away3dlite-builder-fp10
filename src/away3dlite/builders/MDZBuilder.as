package away3dlite.builders{	import away3dlite.animators.MovieMesh;	import away3dlite.arcane;	import away3dlite.core.utils.Debug;	import away3dlite.loaders.data.MaterialData;	import away3dlite.materials.BitmapMaterial;		import com.adobe.images.PNGEncoder;		import flash.utils.Dictionary;		import nochump.util.zip.ZipEntry;	import nochump.util.zip.ZipOutput;

	use namespace arcane;	/**	 * MDZBuilder : Multi MD2 in 1 file zip format as MDZ	 * @author katopz	 */	public class MDZBuilder extends MD2Builder	{		public var isIncludeMaterial:Boolean = true;		public var texturePath:String = "";				public var meshNameSuffix:String = "";				public function MDZBuilder()		{			super();		}		public function getMDZ(meshes:Vector.<MovieMesh>):ZipOutput		{			var _mdz:ZipOutput = new ZipOutput();			var _mesh:MovieMesh;			var _materials:Dictionary = new Dictionary(true);			var _url:String;			// write all material as png, TODO : as jpg option 			for each (var _materialData:MaterialData in _materialLibrary)				if (_materialData.textureBitmap)				{					if(_materialData.textureFileName && _materialData.textureFileName != "")						_url = texturePath +_materialData.textureFileName;					else						_url = texturePath +_materialData.name + ".png";										if(isIncludeMaterial)					{						_mdz.putNextEntry(new ZipEntry(_url));						_mdz.write(PNGEncoder.encode(_materialData.textureBitmap));						_mdz.closeEntry();					}										_materials[_url] = _materialData.textureBitmap;										Debug.trace(" + Material :" + _url);				}						// md2			for each (_mesh in meshes)			{				if (_mesh.material is BitmapMaterial)				{					for (_url in _materials)						if(_materials[_url] == BitmapMaterial(_mesh.material).bitmapData)							BitmapMaterial(_mesh.material).url = _url;				}								_mdz.putNextEntry(new ZipEntry(_mesh.name + meshNameSuffix + ".md2"));				_mdz.write(getMD2(_mesh));				_mdz.closeEntry();								Debug.trace(" + Mesh :" + _mesh.name + meshNameSuffix + ".md2");			}						_mdz.finish();			// gc			_materials = null;			return _mdz;		}	}}